{"version":3,"sources":["Favfilm.jsx","App.js","serviceWorker.js","index.js"],"names":["FavFilm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","poster","comment","onChange","bind","assertThisInitialized","submitForm","e","setState","defineProperty","target","value","preventDefault","config","method","headers","Content-Type","body","JSON","stringify","alert","fetch","then","res","json","error","concat","catch","console","react_default","a","createElement","className","clasName","onSubmit","htmlFor","type","id","React","Component","Film","Favfilm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4PA8GeA,cA1Gb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,GACNC,OAAQ,GACRC,QAAS,IAGXV,EAAKW,SAAWX,EAAKW,SAASC,KAAdX,OAAAY,EAAA,EAAAZ,CAAAD,IAChBA,EAAKc,WAAad,EAAKc,WAAWF,KAAhBX,OAAAY,EAAA,EAAAZ,CAAAD,IATDA,wEAaVe,GACPZ,KAAKa,SAALf,OAAAgB,EAAA,EAAAhB,CAAA,GACGc,EAAEG,OAAOV,KAAOO,EAAEG,OAAOC,2CAInBJ,GACTA,EAAEK,iBAEF,IAAMC,EAAS,CACbC,OAAQ,OACRC,QAAS,CACPC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUxB,KAAKI,QAKJ,KAApBJ,KAAKI,MAAMC,MAAqC,KAAtBL,KAAKI,MAAME,QAAwC,KAAvBN,KAAKI,MAAMG,QACnEkB,MAAM,mCAENC,MALU,qDAKCR,GACRS,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GACAA,EAAIE,MACNL,MAAMG,EAAIE,OAEVL,MAAK,kDAAAM,OAAmDH,EAAnD,QAGRI,MAAM,SAAApB,GACLqB,QAAQH,MAAMlB,GACda,MAAM,kBAEVzB,KAAKa,SAAS,CACZR,KAAM,GACNC,OAAQ,GACRC,QAAS,uCAOb,OACE2B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,4BAEAH,EAAAC,EAAAC,cAAA,QAAME,SAAS,OAAOC,SAAUvC,KAAKW,YACjCuB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAlB,wCACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,QAAf,iBACAN,EAAAC,EAAAC,cAAA,SACEK,KAAK,OACLC,GAAG,OACHrC,KAAK,OACLG,SAAUR,KAAKQ,SACfQ,MAAOhB,KAAKI,MAAMC,QAItB6B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,UAAf,mBACAN,EAAAC,EAAAC,cAAA,SACEK,KAAK,OACLC,GAAG,SACHrC,KAAK,SACLG,SAAUR,KAAKQ,SACfQ,MAAOhB,KAAKI,MAAME,UAItB4B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,WAAf,YACAN,EAAAC,EAAAC,cAAA,YACEM,GAAG,UACHrC,KAAK,UACLG,SAAUR,KAAKQ,SACfQ,MAAOhB,KAAKI,MAAMG,WAItB2B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAQC,UAAU,SAASI,KAAK,SAASzB,MAAM,mBAlGvC2B,IAAMC,WCSbC,MARf,WACE,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAACU,EAAD,QCKeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.064cd798.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass FavFilm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      poster: '',\n      comment: '',\n    }\n\n    this.onChange = this.onChange.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n  }\n\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  }\n\n  submitForm(e) {\n    e.preventDefault();\n\n    const config = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(this.state),\n    };\n\n    const url = \"http://campus-bordeaux.ovh:3001/api/quests/movies/\";\n\n    if (this.state.name === \"\" || this.state.poster === \"\" || this.state.comment === \"\") {\n      alert('Please fill all the fields :)!')\n    } else {\n      fetch(url, config)\n        .then(res => res.json())\n        .then(res => {\n          if (res.error) {\n            alert(res.error);\n          } else {\n            alert(`Your favorite film was Added and it's the num. ${res}!`);\n          }\n        })\n        .catch(e => {\n          console.error(e);\n          alert('Error sorry!');\n        });\n      this.setState({\n        name: '',\n        poster: '',\n        comment: ''\n      })\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"FormFavFilm\">\n        <h1 className=\"title\">Share your favorite film</h1>\n\n        <form clasName=\"form\" onSubmit={this.submitForm}>\n            <legend className=\"legend\">Feel free to add your favorite film!</legend>\n            <div className=\"form-data\">\n              <label htmlFor=\"name\">Favorite film</label>\n              <input\n                type=\"text\"\n                id=\"name\"\n                name=\"name\"\n                onChange={this.onChange}\n                value={this.state.name}\n              />\n            </div>\n\n            <div className=\"form-data\">\n              <label htmlFor=\"poster\">Url of the film</label>\n              <input\n                type=\"text\"\n                id=\"poster\"\n                name=\"poster\"\n                onChange={this.onChange}\n                value={this.state.poster}\n              />\n            </div>\n\n            <div className=\"form-data\">\n              <label htmlFor=\"comment\">Comments</label>\n              <textarea\n                id=\"comment\"\n                name=\"comment\"\n                onChange={this.onChange}\n                value={this.state.comment}>\n              </textarea>\n            </div>\n\n            <div className=\"form-data\">\n              <input  className=\"button\" type=\"submit\" value=\"Send\" />\n            </div>\n        </form>\n      </div>\n    )\n  }\n\n}\n\nexport default FavFilm;","import React from 'react';\nimport './App.css';\nimport FavFilm from './Favfilm';\n\nfunction Film() {\n  return (\n    <div className=\"Film\">\n     <FavFilm />\n    </div>\n  );\n}\n\nexport default Film;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}